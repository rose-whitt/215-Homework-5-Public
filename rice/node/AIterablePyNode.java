package main.rice.node;

import main.rice.obj.AIterablePyObj;
import main.rice.obj.APyObj;
import main.rice.obj.PyListObj;

import java.util.*;

/**
 * An abstract class whose instances represent generators for iterable Python objects.
 *
 * @param <InnerType> the type of object generated by the leftChild node, which represents
 *                    the type of elements in this iterable object; if we invoke
 *                    this.leftChild.genExVals(), it will return a Set<InnerType>
 */
public abstract class AIterablePyNode<OuterType extends AIterablePyObj<InnerType>,
    InnerType extends APyObj> extends APyNode<OuterType> {
    protected APyNode<InnerType> leftChild;

    public APyNode<InnerType> getLeftChild() {
        return this.leftChild;
    }


    /**
     * Recursive helper for genExVals that generates all combinations of the inner type domain given the current value (length)
     * from the outer type domain
     * @param maxValue: current length from domain
     * @return: a set of sets where each set is of length maxValue and the appropriate combination of elements of type innerType
     */
    public Set<List<InnerType>> genExValsRecHelper(int maxValue, Set<InnerType> childGenExVals) {
        // when length is zero
        if (maxValue == 0) {
            return new HashSet<>(Set.of(new ArrayList<>()));
        }

        else {
            //      accumulation
            Set<List<InnerType>> subsets = new HashSet<>(Set.of(new ArrayList<>()));
            //      permutations, recursive call
            Set<List<InnerType>> shortPerms = genExValsRecHelper(maxValue - 1, childGenExVals);

            // for each permutation of length - 1
            for (List<InnerType> shortPerm : shortPerms) {
                // for each value to be added
                for (InnerType val : childGenExVals) {
                    // copy the previous permutation of lower length
                    List<InnerType> temp = new ArrayList<>(shortPerm);
                    // add your value to that permutation
                    temp.add(val);
                    // add the updated permutation to your subsets
                    subsets.add(temp);
                }
            }

            // return your subsets, each element of the given length
            return subsets;

        }
    }
}