package main.rice.node;

import main.rice.obj.PyCharObj;
import main.rice.obj.PyListObj;
import main.rice.obj.PyStringObj;
import main.rice.obj.PyTupleObj;

import java.util.*;

public class PyStringNode extends APyNode<PyStringObj> {

    // fields
    /**
     * domain of string characters from which the PyStringObj can be constructed
     */
    private String charDomain;


    /**
     * PyStringNode constructor. Will create a PyStringNode encapsulating characters from given domain.
     * @param domain : the inner type of PyStringNode to create on.
     */
    public PyStringNode(String domain) {
        charDomain = domain;
    }

    public Set<PyStringObj> genExVals() {
        // PRE PROCESS
        Set<PyStringObj> retLi = new HashSet<>();

        //      sort
        List<Number> exDomainCopy = this.getExDomain();
        List<Integer> exDomainInts = new ArrayList<>();
        for (Number len : exDomainCopy) {
            int temp = (int) len;
            exDomainInts.add(temp);
        }
        Collections.sort(exDomainInts);


        int lenSize = this.getExDomain().size();
        //      find current maximum length
        int maxVal = exDomainInts.get(lenSize - 1);

        // RECURSION
        Set<String> helper = genExValsRecHelper(maxVal);

        // POST PROCESSING
        for (String li : helper) {

            if (this.getExDomain().contains(li.length())) {
                PyStringObj liNode = new PyStringObj(li);
                retLi.add(liNode);
            }
        }
        return retLi;

    }

    public Set<String> genExValsRecHelper(int maxValue) {
        // empty string
        if (maxValue == 0) {
            String empty = "";
            Set<String> emptyStringSet = new HashSet<>(Collections.singleton(""));
            return emptyStringSet;
        } else {
            // accumulation
            Set<String> subsets = new HashSet<>();
            // recursive accumulation
            Set<String> perms = genExValsRecHelper(maxValue - 1);

            // for each string that is smaller than current domain len
            for (String perm : perms) {
                // for each character in character domain
                for (int i = 0; i < this.charDomain.length(); i++) {
                    // get current character in character domain
                    String currentChar = String.valueOf(this.charDomain.charAt(i));
                    // append current character to the current string in permutation domain
                    //      must make copy of current string
                    String temp = perm;
                    temp = temp + currentChar;
                    // add the newly created string of appropriate length to the accumulation of subsets
                    subsets.add(temp);
                }
                subsets.add(perm);
            }
            return subsets;
        }
    }

    /**
     * helper for genRandVal that gets a random character from the given domain
     * @return : a character representing a random character from charDomain
     */
    public char genRandChar() {
        int charIndex = rand.nextInt(this.charDomain.length());
        return this.charDomain.charAt(charIndex);
    }

    /**
     * Generate a random PyStringObj containing random characters (generated by their
     *          own genRandVal()) and is of a randomly selected length from the random domain
     *
     * @return : a PyStringObj of a random length randomly chosen from the random domain
     *              with values of type character that were randomly generated from
     *              character's domain
     */
    public PyStringObj genRandVal() {
        // create list of inner type
        String domainRand = "";

        // get length randomly from random domain
        int len = (int) this.ranDomainChoice();

        // randomly select length from domain
        for (int i = 0; i < len; i++) {
            domainRand = domainRand + genRandChar();
        }

        // post processing


        return new PyStringObj(domainRand);
    }
}
