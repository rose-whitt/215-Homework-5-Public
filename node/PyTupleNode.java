package main.rice.node;

import main.rice.obj.APyObj;
import main.rice.obj.PyListObj;
import main.rice.obj.PyTupleObj;

import java.util.*;

public class PyTupleNode<InnerType extends APyObj> extends AIterablePyNode<PyTupleObj<InnerType>, InnerType>{
    /**
     //     * The domain for exhaustive generation.
     //     */
    protected List<Number> exDomain;

    /**
     * The domain for random generation.
     */
    protected List<Number> ranDomain;

    /**
     * The RNG used for random generation.
     */
    protected Random rand = new Random();

    private APyNode<InnerType> innerNodeChild;


    public PyTupleNode(APyNode<InnerType> innerNode) {
        this.leftChild = innerNode;
//        listNode = new PyListNode<>(innerNode);
    }



        /**
     * Generates all valid PyObjs of type OuterType within the exhaustive domain.
     *
     * @return a set of PyObjs of type OuterType comprising the exhaustive domain
     */
    public Set<PyTupleObj<InnerType>> genExVals() {
        // PRE PROCESS
        Set<PyTupleObj<InnerType>> retLi = new HashSet<>();

        List<Number> exDomainCopy = this.getExDomain();
        List<Integer> exDomainInts = new ArrayList<>();
        for (Number len : exDomainCopy) {
            int temp = (int) len;
            exDomainInts.add(temp);
        }
        Collections.sort(exDomainInts);

        int lenSize = this.getExDomain().size();
        int maxVal = exDomainInts.get(lenSize - 1);

        // RECURSION
        Set<InnerType> childGenExVals = this.getLeftChild().genExVals();
        Set<List<InnerType>> helper = genExValsRecHelper(maxVal, childGenExVals);

        // POST PROCESSING
        for (List<InnerType> li : helper) {
            if (this.getExDomain().contains(li.size())) {
                PyTupleObj liNode = new PyTupleObj(li);
                retLi.add(liNode);
            }
        }

        return retLi;

    }

    /**
     * Generate a random PyTupleObj containing random InnerTypes (generated by their
     *          own genRandVal()) and is of a randomly selected length from the random domain
     *
     * @return : a PyTupleObj of a random length randomly chosen from the random domain
     *              with values of type InnerType that were randomly generated from
     *              InnerType's domain
     */
    public PyTupleObj<InnerType> genRandVal() {
        // create list of inner type
        List<InnerType> listInner = new ArrayList<>();

        // get length randomly from random domain
        int len = (int) this.ranDomainChoice();

        // randomly select length from domain
        for (int i = 0; i < len; i++) {
            listInner.add(this.getLeftChild().genRandVal());
        }

        // post processing
        // create PyListObj
        PyTupleObj<InnerType> randList = new PyTupleObj<>(listInner);

        return randList;
    }


}
